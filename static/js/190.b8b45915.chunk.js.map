{"version":3,"file":"static/js/190.b8b45915.chunk.js","mappings":"sLAEaA,E,QAAiBC,EAAAA,EAAH,sF,SCW3B,EAVqB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACpB,OAAO,SAACF,EAAD,UAAiBE,M,sKCFfC,EAAYF,EAAAA,EAAAA,GAAH,qGAOTG,EAAWH,EAAAA,EAAAA,GAAH,wBAGRI,EAAWJ,EAAAA,EAAAA,EAAH,0CAIRK,EAAYL,EAAAA,EAAAA,EAAH,6D,mBCuBtB,EAjCgB,WACZ,OAAoDM,EAAAA,EAAAA,UAAS,IAA7D,eAAOC,EAAP,KAA2BC,EAA3B,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACN,GAAKF,EAAL,CAKA,IAAMG,EAAc,mCAAG,8GAEWC,EAAAA,EAAAA,IAAgBJ,GAF3B,OAETK,EAFS,OAGfN,EAAsBM,GAHP,gDAMfC,QAAQC,IAAI,KAAMC,SANH,yDAAH,qDASpBL,OACD,CAACH,IAEJ,IAAMS,EAAqD,IAA9BX,EAAmBY,OAEhD,OAAO,8BACFD,GAAuB,SAAChB,EAAD,UAAYK,EAAmBa,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OAA0B,UAACnB,EAAD,YACrF,SAACC,EAAD,UAAWiB,KACX,SAAChB,EAAD,UAAYiB,MAFwFD,SAG3E,SAACE,EAAA,EAAD,CAActB,KAAK,6B,0MCjC9CuB,EAAU,mCAChBC,IAAAA,SAAAA,QAAyB,+BAGlB,IAAMC,EAAW,mCAAG,+GAEID,IAAAA,IAAA,sCAAyCD,IAF7C,uBAEXG,EAFW,EAEXA,KAFW,kBAIZA,EAAKC,SAJO,gCAOnBb,QAAQC,IAAI,QAAZ,MAPmB,yBAUnBD,QAAQC,IAAI,uBAVO,4EAAH,qDAeXa,EAAc,mCAAG,WAAOC,GAAP,kGAEDL,IAAAA,IAAA,gCAAmCD,EAAnC,kBAAoDM,IAFnD,uBAEfH,EAFe,EAEfA,KAFe,kBAIfA,EAAKC,SAJU,gCAOtBb,QAAQC,IAAI,QAAZ,MAPsB,yBAUtBD,QAAQC,IAAI,0BAVU,4EAAH,sDAede,EAAmB,mCAAG,WAAOC,GAAP,kGAENP,IAAAA,IAAA,iBAAoBO,EAApB,oBAAwCR,IAFlC,uBAEpBG,EAFoB,EAEpBA,KAFoB,kBAIpBA,GAJoB,gCAO3BZ,QAAQC,IAAI,QAAZ,MAP2B,yBAU3BD,QAAQC,IAAI,+BAVe,4EAAH,sDAenBiB,EAAkB,mCAAG,WAAOD,GAAP,kGAEHP,IAAAA,IAAA,iBAAoBO,EAApB,4BAAgDR,IAF7C,uBAElBG,EAFkB,EAElBA,KAFkB,kBAInBA,GAJmB,gCAO1BZ,QAAQC,IAAI,QAAZ,MAP0B,yBAU1BD,QAAQC,IAAI,8BAVc,4EAAH,sDAgBlBH,EAAe,mCAAG,WAAOmB,GAAP,kGAEAP,IAAAA,IAAA,iBAAoBO,EAApB,4BAAgDR,IAFhD,uBAEfG,EAFe,EAEfA,KAFe,kBAIhBA,EAAKC,SAJW,gCAOvBb,QAAQC,IAAI,QAAZ,MAPuB,yBAUvBD,QAAQC,IAAI,2BAVW,4EAAH","sources":["components/ErrorMessage/ErrorMessage.styled.jsx","components/ErrorMessage/ErrorMessage.jsx","pages/Reviews/Reviews.styled.jsx","pages/Reviews/Reviews.jsx","service/movie-service.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ErrorMessageSt = styled.p`\nmargin: 0;\nfont-size: 18px;\nfont-weight: 500;\ncolor: red;\n`;\n\n","import PropTypes from 'prop-types'; \nimport { ErrorMessageSt } from \"./ErrorMessage.styled\";\n\nconst ErrorMessage = ({ text }) => {\n    return <ErrorMessageSt>{text}</ErrorMessageSt>\n}\n\n\nErrorMessage.propTypes = {\n    text: PropTypes.string.isRequired,\n}\n\n\nexport default ErrorMessage;","import styled from \"@emotion/styled\";\n\nexport const ReviewsSt = styled.ul`\nfont-size: 25px;\nfont-weight: 700;\nlist-style: none;\npadding-left: 10px;\n`;\n\nexport const ReviewSt = styled.li`\n`;\n\nexport const AuthorSt = styled.p`\nfont-size: 18px;\n`;\n\nexport const ContentSt = styled.p`\nfont-size: 15px;\nfont-weight: 400;\n`;","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieReviews } from \"service/movie-service\";\nimport { ReviewsSt, ReviewSt, AuthorSt, ContentSt } from \"./Reviews.styled\";\nimport ErrorMessage from \"components/ErrorMessage\";\n\nconst Reviews = () => {\n    const [reviewsInformation, setReviewsInformation] = useState([]);\n\n    const { movieId } = useParams();\n    \n    useEffect(() => {\n        if (!movieId) {\n            return;\n        }\n        \n        // получает информацию о актере\n        const getInformation = async () => {\n            try {\n                const dataReviews = await getMovieReviews(movieId);\n                setReviewsInformation(dataReviews)\n            }\n            catch (error) {\n                console.log(error.message);\n            }\n        }\n        getInformation();\n    }, [movieId])\n\n    const isReviewsInformation = reviewsInformation.length !== 0;\n\n    return <>\n        {isReviewsInformation ? <ReviewsSt>{reviewsInformation.map(({ author, content }) => (<ReviewSt key={author}>\n        <AuthorSt>{author}</AuthorSt>\n        <ContentSt>{content}</ContentSt>\n    </ReviewSt>))}</ReviewsSt> : <ErrorMessage text=\"There is no reviews.\" ></ErrorMessage >}</>\n}\n\n\nexport default Reviews;","import axios from 'axios';\n\nconst API_KEY = '2af9cbb95e748f3536884b81d35f838b';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3'; // автоматически подставляется в путь при запросе\n\n// получает список самых популярных фильмов\nexport const getTrending = async () => {\n    try {\n        const { data } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n        // console.log(\"data.results\", data.results);\n        return data.results;\n    }\n    catch(error) {\n        console.log(\"error\", error);\n    }\n    finally {\n        console.log(\"finally getTrending\");        \n    }\n}\n\n// осуществляет поиск кинофильма по ключевому слову\nexport const getMovieByName = async (query) => {\n    try {\n        const {data} = await axios.get(`/search/movie?api_key=${API_KEY}&query=${query}`);\n        // console.log(\"data.results\", data.results);\n        return data.results;\n    }\n    catch(error) {\n        console.log(\"error\", error);\n    }\n    finally {\n        console.log(\"finally getMovieByName\");        \n    }\n}\n\n// получает полную информацию о фильме\nexport const getMovieInformation = async (movie_id) => {\n    try {\n        const {data} = await axios.get(`/movie/${movie_id}?api_key=${API_KEY}`);\n        // console.log(\"dataFilm\", data);\n        return data;\n    }\n    catch(error) {\n        console.log(\"error\", error);\n    }\n    finally {\n        console.log(\"finally getMovieInformation\");        \n    }\n}\n\n// получает информацию о актёрском составе фильма\nexport const getCastInformation = async (movie_id) => {\n    try {\n        const { data } = await axios.get(`/movie/${movie_id}/credits?api_key=${API_KEY}`);\n        // console.log(\"dataCast\", data);\n        return data;\n    }\n    catch(error) {\n        console.log(\"error\", error);\n    }\n    finally {\n        console.log(\"finally getCastInformation\");        \n    }\n}\n\n// получает обзоры\n\nexport const getMovieReviews = async (movie_id) => {\n    try {\n        const { data } = await axios.get(`/movie/${movie_id}/reviews?api_key=${API_KEY}`);\n        // console.log(\"dataReviews\", data.results);\n        return data.results;\n    }\n    catch(error) {\n        console.log(\"error\", error);\n    }\n    finally {\n        console.log(\"finally getMovieReviews\");        \n    }\n}"],"names":["ErrorMessageSt","styled","text","ReviewsSt","ReviewSt","AuthorSt","ContentSt","useState","reviewsInformation","setReviewsInformation","movieId","useParams","useEffect","getInformation","getMovieReviews","dataReviews","console","log","message","isReviewsInformation","length","map","author","content","ErrorMessage","API_KEY","axios","getTrending","data","results","getMovieByName","query","getMovieInformation","movie_id","getCastInformation"],"sourceRoot":""}
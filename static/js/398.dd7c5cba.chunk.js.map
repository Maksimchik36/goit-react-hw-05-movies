{"version":3,"file":"static/js/398.dd7c5cba.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/Form/Form.styled.jsx","components/Form/Form.jsx","pages/Movies/Movies.styled.jsx","pages/Movies/Movies.jsx","service/movie-service.js"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const MoviesListSt = styled.ul`\npadding-left: 20px;\n`;\n\nexport const MovieSt = styled.li`\n`;","import { Link, useLocation } from \"react-router-dom\";\nimport { MoviesListSt, MovieSt } from \"./MoviesList.styled\";\n\nconst MoviesList = ({ movies }) => {\n    const location = useLocation();\n\n    return <MoviesListSt>\n        {movies.map(({ id, original_title }) => (<MovieSt key={id}><Link to={`/movies/${id}`} id={id} state={{ from: location }} style={{ display: \"block\" }}>{original_title}</Link></MovieSt>))}\n    </MoviesListSt>\n}\n\nexport default MoviesList;","import styled from \"@emotion/styled\";\n\nexport const FormSt = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  border-color: blac\n  overflow: hidden;\n  `;\n\n  export const FormButtonSt = styled.button`\n  display: inline-block;\n  width: 36px;\n  height: 36px;\n  border: 0;\n  background-image: url('https://image.flaticon.com/icons/svg/149/149852.svg');\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  &:hover {\n   opacity: 1;\n}\n`;\n\nexport const FormInputSt = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 24px;\n  padding-left: 4px;\n  padding-right: 4px;\n  \n  &::placeholder {\n  font: inherit;\n  font-size: 18px;\n  }\n\n  &::hover{\n      border-color: skyblue;\n  }\n`;","import { useState } from \"react\";\nimport { FormSt, FormButtonSt, FormInputSt } from \"./Form.styled\";\nimport { FcSearch } from 'react-icons/fc';\n\n\nconst Form = ({onSubmit}) => {\n    const [query, setQuery] = useState('');\n\n    // записывает введённое значение в query в Form\n  const handleInput = (e) => {\n    const {value} = e.currentTarget;\n    setQuery(value.trim().toLowerCase())\n  }\n\n  // вызывается ф-я onSubmit из Movies и записывается значение из query (Form) - в query (Movies)\n  const handleSubmit = (e) => {\n    e.preventDefault();\n        \n    if(!query){\n      alert(\"Введите Ваш запрос\");\n      return;\n    }\n\n    onSubmit(query); // вызов ф-и из Movies\n    setQuery('');   \n  }\n\n    return (\n        <FormSt onSubmit={handleSubmit}>\n                    <FormButtonSt type=\"submit\">\n                      <FcSearch style={{height: \"2em\", width: \"2em\",}}/>\n                    </FormButtonSt>\n\n                    <FormInputSt\n                      onChange = {handleInput}\n                      value = {query}\n                      type=\"text\"\n                      autoComplete=\"off\"\n                      autoFocus\n                      placeholder=\"Search movie\"\n                    />\n                 </FormSt>\n    )\n}\n\nexport default Form;","import styled from \"@emotion/styled\";\n\nexport const MoviesSt = styled.div`\npadding: 20px;\n`;","import { useState, useEffect } from \"react\";\nimport Form from \"components/Form\";\nimport { getMovieByName } from '../../service/movie-service';\nimport MoviesList from \"components/MoviesList\";\nimport { MoviesSt } from \"./Movies.styled\";\n\nconst Movies = () => {\n    const [query, setQuery] = useState('');  // значение запроса\n    const [movies, setMovies] = useState([]); // массив фильмов\n    \n\n    useEffect(() => {\n        if (query === '') {\n            return;\n        }\n        // получает один фильм или список фильмов по запросу\n        const getMoviesList = async () => {\n            try {\n                const moviesArray = await getMovieByName(query);\n                if (moviesArray.length !== 0) {\n                    setMovies(moviesArray);\n                }\n            }\n            catch (error) {\n                console.log(error.message);\n            }\n        }\n        getMoviesList();\n     }, [query])\n\n    \n    // перезаписывает значение query в state (Movies)\n    const onSubmit = (query) => {\n        setQuery(query);\n        }\n        \n\n    return (<MoviesSt>    \n        {<Form onSubmit={onSubmit}></Form>}\n\n        {movies && <MoviesList movies={movies}></MoviesList>}\n        </MoviesSt>    \n    );\n}\n\nexport default Movies;","import axios from 'axios';\n\nconst API_KEY = '2af9cbb95e748f3536884b81d35f838b';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3'; // автоматически подставляется в путь при запросе\n\n// получает список самых популярных фильмов\nexport const getTrending = async () => {\n    try {\n        const { data } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n        // console.log(\"data.results\", data.results);\n        return data.results;\n    }\n    catch(error) {\n        console.log(\"error\", error);\n    }\n    finally {\n        console.log(\"finally getTrending\");        \n    }\n}\n\n// осуществляет поиск кинофильма по ключевому слову\nexport const getMovieByName = async (query) => {\n    try {\n        const {data} = await axios.get(`/search/movie?api_key=${API_KEY}&query=${query}`);\n        // console.log(\"data.results\", data.results);\n        return data.results;\n    }\n    catch(error) {\n        console.log(\"error\", error);\n    }\n    finally {\n        console.log(\"finally getMovieByName\");        \n    }\n}\n\n// получает полную информацию о фильме\nexport const getMovieInformation = async (movie_id) => {\n    try {\n        const {data} = await axios.get(`/movie/${movie_id}?api_key=${API_KEY}`);\n        // console.log(\"dataFilm\", data);\n        return data;\n    }\n    catch(error) {\n        console.log(\"error\", error);\n    }\n    finally {\n        console.log(\"finally getMovieInformation\");        \n    }\n}\n\n// получает информацию о актёрском составе фильма\nexport const getCastInformation = async (movie_id) => {\n    try {\n        const { data } = await axios.get(`/movie/${movie_id}/credits?api_key=${API_KEY}`);\n        // console.log(\"dataCast\", data);\n        return data;\n    }\n    catch(error) {\n        console.log(\"error\", error);\n    }\n    finally {\n        console.log(\"finally getCastInformation\");        \n    }\n}\n\n// получает обзоры\n\nexport const getMovieReviews = async (movie_id) => {\n    try {\n        const { data } = await axios.get(`/movie/${movie_id}/reviews?api_key=${API_KEY}`);\n        // console.log(\"dataReviews\", data.results);\n        return data.results;\n    }\n    catch(error) {\n        console.log(\"error\", error);\n    }\n    finally {\n        console.log(\"finally getMovieReviews\");        \n    }\n}"],"names":["MoviesListSt","styled","MovieSt","movies","location","useLocation","map","id","original_title","to","state","from","style","display","FormSt","FormButtonSt","FormInputSt","onSubmit","useState","query","setQuery","e","preventDefault","alert","type","height","width","onChange","value","currentTarget","trim","toLowerCase","autoComplete","autoFocus","placeholder","MoviesSt","setMovies","useEffect","getMoviesList","getMovieByName","moviesArray","length","console","log","message","MoviesList","API_KEY","axios","getTrending","data","results","getMovieInformation","movie_id","getCastInformation","getMovieReviews"],"sourceRoot":""}